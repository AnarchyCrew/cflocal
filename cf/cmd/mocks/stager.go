// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/sclevine/cflocal/cf/cmd (interfaces: Stager)

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	engine "github.com/sclevine/cflocal/engine"
	local "github.com/sclevine/cflocal/local"
)

// Mock of Stager interface
type MockStager struct {
	ctrl     *gomock.Controller
	recorder *_MockStagerRecorder
}

// Recorder for MockStager (not exported)
type _MockStagerRecorder struct {
	mock *MockStager
}

func NewMockStager(ctrl *gomock.Controller) *MockStager {
	mock := &MockStager{ctrl: ctrl}
	mock.recorder = &_MockStagerRecorder{mock}
	return mock
}

func (_m *MockStager) EXPECT() *_MockStagerRecorder {
	return _m.recorder
}

func (_m *MockStager) Download(_param0 string) (engine.Stream, error) {
	ret := _m.ctrl.Call(_m, "Download", _param0)
	ret0, _ := ret[0].(engine.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStagerRecorder) Download(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Download", arg0)
}

func (_m *MockStager) Stage(_param0 *local.StageConfig) (engine.Stream, error) {
	ret := _m.ctrl.Call(_m, "Stage", _param0)
	ret0, _ := ret[0].(engine.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStagerRecorder) Stage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stage", arg0)
}
